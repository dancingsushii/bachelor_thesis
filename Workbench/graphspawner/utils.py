import os
import networkx as nx

def add_channel(graph: nx.DiGraph, src: str, dst: str, src_dst_balance: int, dst_src_balance: int):
    """Adds a bidirectional link between provided ``src`` and ``dst`` nodes with
    \n``src_dst_balance`` on src --> dst and
    \n``dst_src_balance`` on dst --> src weights."""
    graph.add_edge(src, dst, src_dst_balance = src_dst_balance, dst_src_balance = dst_src_balance)


def get_pickle_file_path() -> str:
    return os.path.join(os.path.dirname(__file__).replace("graphspawner", "share"), "graph_pickle.gpickle.gz")

def get_spawn_dir_path() -> str:
    return os.path.dirname(__file__).replace("graphspawner", "spawn")

def get_spawn_file_path() -> str:
    return os.path.join(get_spawn_dir_path(), "spawn.conf")

def get_nodes_file_path() -> str:
    return os.path.join(get_spawn_dir_path(), "nodes.txt")

def write_spawn_conf(nodes: list):
    # change the spawn file to spawn the correct nodes #
    spawn_dir = get_spawn_dir_path()
    if not os.path.exists(spawn_dir): os.mkdir(spawn_dir)
    spawn_file = get_spawn_file_path()
    if os.path.exists(spawn_file): os.remove(spawn_file)
    with open(spawn_file, "w") as f:
        f.write("## Configuration generated by spawner.py" + "\n")
        f.write("start master --wipe --miner=0,5,10" + "\n")
        for node in nodes:
            f.write(f"start {node} --wipe --faucet master" + "\n")
        f.write("## EOF")
    # add a file with node aliases in each line #
    nodes_file = get_nodes_file_path()
    with open(nodes_file, "w") as f:
        for i, node in enumerate(nodes):
            if node == "master": continue
            f.write(f"{node}\n")
        f.write("# EOF")

def pickle_graph(graph: nx.DiGraph):
    pickle_file = get_pickle_file_path()
    nx.write_gpickle(graph, pickle_file)
